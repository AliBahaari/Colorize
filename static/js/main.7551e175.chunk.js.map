{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","colorHex","setColorHex","randArr","newColor","useEffect","i","randIndex","Math","floor","random","push","join","toUpperCase","className","onClick","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMA0DeA,MAvDf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1DC,EAAW,GA8Bf,OA5BAC,qBAAU,WAER,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IAAMC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAElCN,EAASO,KAAKR,EAAQI,IAIxBL,EAAY,IAAME,EAASQ,KAAK,IAAIC,iBAEnC,IAiBD,sBAAKC,UAAU,MAAf,UAEE,sBAAKA,UAAU,aAAf,UACE,wBAAQC,QAlBM,WAElB,IAAK,IAAIT,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IAAMC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAElCN,EAASO,KAAKR,EAAQI,IAIxBL,EAAY,IAAME,EAASQ,KAAK,IAAIC,gBAQhC,sBAGA,2BAGF,qBAAKG,MAAO,CAACC,gBAAiBhB,GAAWa,UAAU,kBAAnD,SACE,8BACIb,UCtCGiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7551e175.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const [colorHex, setColorHex] = useState('');\n\n  const randArr = ['a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6];\n  let newColor = [];\n\n  useEffect(() => {\n\n    for (let i = 0; i < 6; i++) {\n\n      const randIndex = Math.floor(Math.random() * 11);\n    \n      newColor.push(randArr[randIndex]);\n\n    }\n\n    setColorHex('#' + newColor.join('').toUpperCase());\n\n  }, []);\n\n  const randomColor = () => {\n\n    for (let i = 0; i < 6; i++) {\n\n      const randIndex = Math.floor(Math.random() * 11);\n    \n      newColor.push(randArr[randIndex]);\n\n    }\n\n    setColorHex('#' + newColor.join('').toUpperCase());\n\n  }\n\n  return (\n    <div className=\"app\">\n      \n      <div className=\"mainButton\">\n        <button onClick={randomColor}>\n          Colorize\n        </button>\n        <div></div>\n      </div>\n\n      <div style={{backgroundColor: colorHex}} className=\"colorBackground\">\n        <div>\n          { colorHex }\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}